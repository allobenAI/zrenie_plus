# core_context.md

## === ОПИСАНИЕ ПРОЕКТА / ИДЕЯ ===

**Название:** Зрение+  
**Тип:** Кроссплатформенное мобильное приложение (iOS + Android)  
**Фреймворк:** Flutter  
**Тематика:** Digital Health / Eye Care / Focus Assistant

**Описание:**  
Разработай приложение, которое помогает пользователю заботиться о зрении, используя правило 20-20-20:  
Каждые 20 минут пользователь должен смотреть на объект, находящийся на расстоянии 6 метров, в течение 20 секунд.

Реализуй логику, при которой приложение:
- запускает таймер по заданной частоте,
- отправляет уведомление или сигнал,
- показывает экран фокусировки с 20-секундной анимацией,
- фиксирует факт выполнения,
- сохраняет серию (streak),
- визуализирует статистику по дням.

---

## === ЦЕЛЬ И ИСПОЛЬЗОВАНИЕ ЭТОГО ФАЙЛА ===

Используй этот файл как **банк памяти проекта** (Memory Bank).  
Загружай его в начале каждой сессии. Работай с ним как с основным источником данных и состояния проекта.  
При внесении значительных изменений в цели, структуру или функциональность проекта — запрашивай подтверждение на обновление этого файла.  
Фиксируй дату последнего обновления и кратко описывай суть изменений.  
Ты уже получаешь все поведенческие инструкции на системном уровне — соблюдай их.

---

## === ОБЯЗАННОСТИ ПОЛЬЗОВАТЕЛЯ ===

Перед началом разработки пользователь обязан:

1. Установить Flutter SDK: https://flutter.dev/docs/get-started/install  
2. Установить Android SDK и эмулятор (или физическое устройство)
3. Установить Xcode и:
   - активировать `xcode-select` и CLI tools
   - настроить сертификаты и provisioning profiles
4. Установить IDE (например, VS Code) с Flutter-плагином
5. Проверить окружение с помощью `flutter doctor`

**Важно:** сборка и публикация iOS-приложения требует ручной работы через Xcode или CLI.

---

## === ПЛАТФОРМЫ ===

- **iOS:** основная платформа. Обязательно обеспечь поддержку.
- **Android:** обязательная поддержка через Flutter CLI.
- **macOS (опционально):** поддерживай UI-совместимость при необходимости.

---

## === MVP-ФУНКЦИОНАЛ ===

Реализуй следующие функции:

1. Таймер, запускающий напоминания каждые 20 минут
2. Экран паузы с 20-секундным таймером и визуальной анимацией
3. Подсчёт и сохранение streak'ов
4. Ведение базовой статистики (день/неделя)
5. Настройки: частота напоминаний, темы, звук, вибрация

---

## === СТРУКТУРА ПРОЕКТА ===

lib/  
├── main.dart  
├── screens/  
│   ├── home_screen.dart  
│   ├── break_screen.dart  
│   ├── stats_screen.dart  
│   └── settings_screen.dart  
├── widgets/  
│   ├── timer_display.dart  
│   └── animated_focus_dot.dart  
├── services/  
│   ├── notification_service.dart  
│   ├── streak_service.dart  
│   └── storage_service.dart  
├── models/  
│   └── break_log.dart  
└── utils/  
    ├── constants.dart  
    └── theme.dart

---

## === РЕКОМЕНДАЦИИ ПО РЕАЛИЗАЦИИ ===

- Используй Provider или Riverpod
- Разделяй UI, бизнес-логику и доступ к данным
- Храни пользовательские данные локально (Hive или SharedPreferences)
- Обеспечь чистую архитектуру и масштабируемость
- Выноси повторяющиеся параметры в константы
- Используй адаптивный и минималистичный UI
- Поддерживай тёмную и светлую темы
- Документируй ключевые компоненты и модули
- Предусмотри расширения: геймификация, AI-анализ, визуальные упражнения

---

## === АРХИТЕКТУРНЫЕ ПРИНЦИПЫ ===

- Принцип "MVP сначала": реализуй только базовую функциональность без излишеств
- Используй простую архитектуру: базовый MVVM без избыточных слоев
- Provider предпочтительнее Riverpod для простоты понимания кода
- Начинай с одного языка (русский), локализацию добавь позже
- Минимизируй количество зависимостей
- Тестирование: только ключевая бизнес-логика (таймер и стрики)
- Хранение данных: начни с SharedPreferences для простоты, мигрируй на Hive при необходимости
- **ВАЖНО:** Никогда не переключайся на другие платформы без явного запроса пользователя, даже если есть технические проблемы с текущей платформой (Android, iOS и т.д.). Все проблемы решаем в рамках запрошенной платформы.

---

## === МОДЕЛИ ДАННЫХ ПРОЕКТА ===

1. **BreakLog** (`models/break_log.dart`):
   ```dart
   class BreakLog {
     final DateTime timestamp;  // Время выполнения/пропуска перерыва
     final bool completed;      // Завершен (true) или пропущен (false)
     
     // Методы сериализации/десериализации для JSON
     factory BreakLog.fromJson(Map<String, dynamic> json);
     Map<String, dynamic> toJson();
   }
   ```

2. **StreakData** (`models/break_log.dart`):
   ```dart
   class StreakData {
     final int currentStreak;    // Текущая серия успешных перерывов
     final int maxStreak;        // Максимальная достигнутая серия
     final DateTime lastCompleted; // Время последнего успешного перерыва
     
     // Методы сериализации/десериализации для JSON
     factory StreakData.fromJson(Map<String, dynamic> json);
     Map<String, dynamic> toJson();
     factory StreakData.initial(); // Начальные данные
   }
   ```

3. **Настройки пользователя** (хранятся как `Map<String, dynamic>`):
   ```dart
   {
     'workMinutes': 20,           // Время между перерывами (минуты)
     'isDarkMode': false,         // Включена ли темная тема
     'notificationsEnabled': true, // Включены ли уведомления
     'soundEnabled': true,        // Включен ли звук
     'vibrationEnabled': true,    // Включена ли вибрация
   }
   ```

---

## === СЕРВИСЫ ПРИЛОЖЕНИЯ ===

1. **StorageService** (`services/storage_service.dart`):
   - Временная заглушка для хранения данных в памяти
   - Не использует SharedPreferences из-за проблем с Android SDK
   - Методы: getSettings, saveSettings, getStreakData, saveStreakData, getBreakLogs, addBreakLog, clearAllData
   - Ключи хранения: app_settings, user_streak, user_stats

2. **StreakService** (`services/streak_service.dart`):
   - Управляет сериями успешных перерывов
   - Увеличивает серию при успешном перерыве
   - Сбрасывает серию при пропуске перерыва
   - Обновляет максимальную серию при необходимости
   - Не увеличивает серию, если последний перерыв был сегодня

3. **NotificationService** (`services/notification_service.dart`):
   - Временная заглушка для уведомлений
   - Отключен из-за проблем с совместимостью

---

## === СРЕДА ЗАПУСКА ===

1. **Запуск приложения на Chrome**:
   - **Правильный запуск:** `cd zrenie_plus_app && flutter run -d chrome`
   - **Запуск с указанием порта:** `cd zrenie_plus_app && flutter run -d chrome --web-port=8000`
   - **Важно:** запускать команды Flutter только из директории `zrenie_plus_app`

2. **Web-режим**:
   - Оптимален для тестирования во время разработки
   - Не имеет проблем с совместимостью библиотек
   - Поддерживает hot-reload для быстрой разработки

3. **Отладка и перезапуск**:
   - Для горячей перезагрузки: нажмите "r" в консоли
   - Для просмотра help: нажмите "h" в консоли
   - Для выхода: нажмите "q" в консоли

---

## === ИЗВЕСТНЫЕ ПРОБЛЕМЫ И РЕШЕНИЯ ===

1. **Android эмулятор**:
   - Проблема: "Running multiple emulators with the same AVD is an experimental feature"
   - Решение: При запуске эмулятора использовать флаг `-read-only` через Android CLI напрямую, а не через Flutter
   - Команда: `cd $HOME/Library/Android/sdk/emulator && ./emulator -avd Pixel_3a_API_33_arm64-v8a -read-only`
   - **Важно**: Если получаете ошибку "Another emulator instance is running", нужно сначала завершить все запущенные экземпляры эмулятора:
     - `cd $HOME/Library/Android/sdk/platform-tools && ./adb -s emulator-5554 emu kill`
     - Также можно использовать Activity Monitor для завершения процессов, связанных с эмулятором

2. **Библиотека уведомлений**:
   - Проблема: Конфликт версий библиотеки flutter_local_notifications с Android SDK
   - Временное решение: Отключение уведомлений через заглушку в NotificationService
   - Постоянное решение: Использовать более старую версию библиотеки (14.x) или другую альтернативу

3. **Android Gradle Plugin**:
   - Проблема: Требуется версия AGP 8.1.0+ при использовании compileSdk 35
   - Решение: Обновить версию AGP в settings.gradle.kts до 8.1.0 или установить compileSdk = 34
   - **Внимание**: Библиотека shared_preferences требует Android SDK 35, что конфликтует с AGP 7.3.1
   - Временное решение: Отключить shared_preferences и заменить её на временное хранение в памяти

4. **Недостаток памяти эмулятора**:
   - Проблема: "INSTALL_FAILED_INSUFFICIENT_STORAGE" при установке APK
   - Ошибка возникает даже при очистке данных приложений через `adb shell pm clear`
   - **Критическое решение**: Необходимо создать совершенно новый эмулятор с увеличенным размером внутреннего хранилища
   - Команда создания эмулятора с большим хранилищем:
     ```
     cd $HOME/Library/Android/sdk/tools/bin && ./avdmanager create avd -n Pixel_Large_Storage -k "system-images;android-33;google_apis;arm64-v8a" -d pixel --sdcard 2048M
     ```
   - Убедиться, что задан достаточный размер внутреннего хранилища и SD-карты (минимум 2GB)

## === ТРЕБОВАНИЯ К НАЧАЛУ РАБОТЫ ===

1. **Проверка Memory Bank**:
   - В начале каждой сессии или диалога ОБЯЗАТЕЛЬНО прочитать Memory Bank (CORE_CONTEXT.MD)
   - После прочтения и синхронизации с Memory Bank сообщить "Memory bank активен"
   - Никогда не пропускать этот шаг, это необходимо для поддержания целостности проекта

2. **Проверка консоли**:
   - При запуске эмулятора или команд Flutter ВСЕГДА проверять консоль на наличие ошибок
   - Не переходить к следующим шагам, пока проблема не будет решена
   - Документировать новые типы ошибок в Memory Bank
   - **КРИТИЧЕСКИ ВАЖНО**: При запуске эмулятора Android необходимо ПОЛНОСТЬЮ ФОКУСИРОВАТЬСЯ на процессе запуска и НЕПРЕРЫВНО наблюдать за консолью
   - **КАТЕГОРИЧЕСКИ ЗАПРЕЩЕНО** запускать любые другие процессы параллельно с запуском эмулятора:
     1. Другие процессы могут прервать запуск эмулятора
     2. Другие процессы могут быть бессмысленными, если они зависят от запущенного эмулятора
     3. Ошибки запуска эмулятора могут быть не замечены при параллельном выполнении других задач
   - Необходимо подтвердить полную загрузку эмулятора (вывод "emulator is ready") перед запуском приложения

3. **Корректный запуск эмулятора**:
   - Перед запуском проверить, нет ли уже запущенных экземпляров: `adb devices`
   - Завершить существующие экземпляры: `cd $HOME/Library/Android/sdk/platform-tools && ./adb -s emulator-5554 emu kill`
   - Запустить эмулятор с правильными флагами: `cd $HOME/Library/Android/sdk/emulator && ./emulator -avd [имя_AVD] -read-only -wipe-data`
   - ДОЖДАТЬСЯ ПОЛНОЙ ЗАГРУЗКИ эмулятора, прежде чем переходить к другим командам
   - АКТИВНО ОТСЛЕЖИВАТЬ сообщения консоли на протяжении всего процесса запуска

---

## === ЭТАПЫ РАЗРАБОТКИ ===

1. Базовый проект: структура, тема, навигация (1 день)
2. Главный экран + таймер + логика правила 20-20-20 (2 дня)
3. Экран перерыва с анимацией (1 день)
4. Локальное хранение и счетчик стриков (1 день)
5. Экран статистики (минимальный) (1 день)
6. Экран настроек (1 день)
7. Финальное тестирование (0.5 дня)

**Важно:** Полный MVP должен быть готов к запуску максимум за 7 дней с начала разработки.

*Расширения (геймификация, AI-анализ) реализуются только после успешного запуска MVP.*

---

## === ИСТОРИЯ ИЗМЕНЕНИЙ ===

**Последнее обновление:** 2023-05-25

| Дата       | Изменения                                                  |
|------------|------------------------------------------------------------|
| 2023-05-25 | Добавлены разделы "Модели данных проекта", "Сервисы приложения" и "Среда запуска" с детальным описанием моделей, сервисов и инструкций по запуску на Chrome. |
| 2023-04-18 | Обновлена информация о проблемах с эмулятором Android и нехваткой памяти. Добавлена информация о конфликте shared_preferences и Android SDK. |
| 2023-04-18 | Добавлены разделы "Требования к началу работы" с обязательной проверкой Memory Bank и консоли. Дополнена информация о проблемах с эмулятором. |
| 2023-04-18 | Добавлены разделы "Известные проблемы и решения" и правило о запуске на платформах. |
| 2023-06-12 | Добавлены разделы "Архитектурные принципы" и "Этапы разработки" с ограничением 7 дней на MVP. |
| 2025-04-17 | Синхронизация с поведением системного агента. Добавлена история изменений. |
| 2025-04-16 | Добавлены рекомендации по архитектуре и структуре проекта. |
| 2025-04-15 | Инициализация контекста: описание проекта, цели, MVP.     |

---

## === ИТОГ ===

Этот файл является основной точкой памяти проекта.  
Загружай его всегда первым. Обновляй при любых существенных изменениях. Соблюдай структуру, соблюдай дисциплину.  
Твоя задача — развивать продукт без отклонений от его ядра.
